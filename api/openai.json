// api/openai.js

export default async function handler(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Méthode non autorisée' });
  }

  const apiKey = process.env.OPENAI_API_KEY;
  const { pair, timeframe } = req.query;

  // Récupérer les dernières bougies depuis Alpha Vantage
  const from = pair.split('/')[0];
  const to = pair.split('/')[1];
  const avUrl = `https://www.alphavantage.co/query`
    + `?function=FX_INTRADAY`
    + `&from_symbol=${from}`
    + `&to_symbol=${to}`
    + `&interval=${timeframe}`
    + `&apikey=${process.env.ALPHA_VANTAGE_KEY}`
    + `&outputsize=compact`;

  try {
    const avRes = await fetch(avUrl);
    const avData = await avRes.json();
    const series = avData[`Time Series FX (${timeframe})`] || {};
    const candles = Object.entries(series)
      .slice(0, 10)
      .reverse()
      .map(([time, vals]) => ({
        time,
        open: parseFloat(vals['1. open']),
        close: parseFloat(vals['4. close'])
      }));

    // Préparer le prompt pour OpenAI
    const systemPrompt = `
Tu es un assistant de trading pour les options binaires.
Analyse ces 10 dernières bougies (open & close).`
      + ` Si les deux dernières bougies sont haussières, répond "UP".`
      + ` Si elles sont baissières, répond "DOWN".`
      + ` Sinon, répond "NO TRADE".`
      + ` Ne renvoie que le mot du signal.`;

    const userPrompt = JSON.stringify(candles);

    const openAIRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0
      })
    });

    const openAIData = await openAIRes.json();
    const signal = openAIData.choices?.[0]?.message?.content.trim() || 'NO TRADE';

    return res.status(200).json({ signal });
  } catch (err) {
    console.error('Erreur dans /api/openai:', err);
    return res.status(500).json({ error: 'Erreur interne du serveur' });
  }
}
